import numpy as np
import matplotlib.pyplot as plt
import PytranTrace as tran
import zernikemod,pdb,time
from utilities.plotting import nanmean
import conicsolve
import reconstruct

global x,y,z,l,m,n,ux,uy,uz

def transform(tx,ty,tz,rx,ry,rz):
    """Coordinate transformation. translations are done first,
    then Rx,Ry,Rz
    """
    global x,y,z,l,m,n,ux,uy,uz
    tran.transform(x,y,z,l,m,n,ux,uy,uz,-tx,-ty,-tz,-rx,-ry,-rz)
    return

def itransform(tx,ty,tz,rx,ry,rz):
    """Inverse of coordinate transformations. -rz,-ry,-rx then
    translations.
    """
    global x,y,z,l,m,n,ux,uy,uz
    tran.itransform(x,y,z,l,m,n,ux,uy,uz,-tx,-ty,-tz,-rx,-ry,-rz)
    return

def reflect():
	"""Reflect rays based on surface normal
	"""
	global l,m,n,ux,uy,uz
	tran.reflect(l,m,n,ux,uy,uz)
	return

def flat():
	"""Trace rays to the XY plane
	"""
	global x,y,z,l,m,n,ux,uy,uz
	tran.flat(x,y,z,l,m,n,ux,uy,uz)
	return

def refract(n1,n2):
	"""Refract rays based on surface normal
	and ray direction cosines from index n1
	into index n2
	"""
	global l,m,n,ux,uy,uz
	tran.refract(l,m,n,ux,uy,uz,n1,n2)
	return

#Wrapper for Zernike surface
#Coordinates are usual arctan2(y,x)
def zernsurf(coeff,rad,rorder=None,aorder=None):
    global x,y,z,l,m,n,ux,uy,uz
    if rorder is None:
        rorder,aorder = zernikemod.zmodes(size(coeff))
    tran.tracezern(x,y,z,l,m,n,ux,uy,uz,coeff,array(rorder),array(aorder),rad)
    rho = np.sqrt(x**2+y**2)
    ind = np.where(rho<=rad)
    vignette(ind=ind)
    return

#Wrapper for Zernike surface with 2 Zernike sets and one with
#arbitrary rotation angle
#Coordinates are usual arctan2(y,x)
def zernsurfrot(coeff1,coeff2,rad,rot,\
                rorder1=None,aorder1=None,rorder2=None,aorder2=None):
    global x,y,z,l,m,n,ux,uy,uz
    if rorder1 is None:
        rorder1,aorder1 = zernikemod.zmodes(size(coeff1))
    if rorder2 is None:
        rorder2,aorder2 = zernikemod.zmodes(size(coeff2))
    tran.tracezernrot(x,y,z,l,m,n,ux,uy,uz,coeff1,array(rorder1),array(aorder1),\
                      coeff2,array(rorder2),array(aorder2),rad,rot)
    rho = np.sqrt(x**2+y**2)
    ind = np.where(rho<=rad)
    vignette(ind=ind)

#Wrapper for spherical surface
def sphere(rad):
    global x,y,z,l,m,n,ux,uy,uz
    tran.tracesphere(x,y,z,l,m,n,ux,uy,uz,rad)

#Wrapper for cylindrical surface
def cyl(rad):
    global x,y,z,l,m,n,ux,uy,uz
    tran.tracecyl(x,y,z,l,m,n,ux,uy,uz,rad)

#Wrapper for cylindrical conics
def cylconic(rad,k):
    global x,y,z,l,m,n,ux,uy,uz
    tran.cylconic(x,y,z,l,m,n,ux,uy,uz,rad,k)

#Wrapper for Wolter primary surface - no vignetting
def wolterprimary(r0,z0):
    global x,y,z,l,m,n,ux,uy,uz
    tran.wolterprimary(x,y,z,l,m,n,ux,uy,uz,r0,z0)
    return

#Wrapper for Wolter secondary surface - no vignetting
def woltersecondary(r0,z0):
    global x,y,z,l,m,n,ux,uy,uz
    tran.woltersecondary(x,y,z,l,m,n,ux,uy,uz,r0,z0)
    return

#Wrapper for Wolter primary surface -
#place at surface tangent point
#+z is surface normal
#+y is toward sky
#+x is azimuthal direction
def wolterprimtan(r0,z0):
    global x,y,z,l,m,n,ux,uy,uz
    #Compute Wolter parameters
    alpha,p,d,e = conicsolve.woltparam(r0,z0)
    transform(0,0,0,-np.pi/2-alpha,0,0)
    #Go to Wolter focus minus gap and half mirror length
    transform(0,conicsolve.primrad(z0+75.,r0,z0),-z0-75.,0,0,0)
    #Place Wolter surface
    wolterprimary(r0,z0)
    #Go back to original coordinate system
    transform(0,-conicsolve.primrad(z0+75.,r0,z0),z0+75.,0,0,0)
    transform(0,0,0,np.pi/2+alpha,0,0)

#Wrapper for Wolter primary surface with sinusoid
def woltersine(r0,z0,amp,freq):
    global x,y,z,l,m,n,ux,uy,uz
    tran.woltersine(x,y,z,l,m,n,ux,uy,uz,r0,z0,amp,freq)
	return

#Wrapper for Wolter sinusoidal surface -
#place at surface tangent point
#+z is surface normal
#+y is toward sky
#+x is azimuthal direction
def woltersinetan(r0,z0,amp,freq):
    global x,y,z,l,m,n,ux,uy,uz
    #Compute Wolter parameters
    alpha,p,d,e = conicsolve.woltparam(r0,z0)
    transform(0,0,0,-np.pi/2-alpha,0,0)
    #Go to Wolter focus minus gap and half mirror length
    transform(0,conicsolve.primrad(z0+75.,r0,z0),-z0-75.,0,0,0)
    #Place Wolter surface
    woltersine(r0,z0,amp,freq)
    #Go back to original coordinate system
    transform(0,-conicsolve.primrad(z0+75.,r0,z0),z0+75.,0,0,0)
    transform(0,0,0,np.pi/2+alpha,0,0)
	return

##Wrapper for L-L secondary surface
##Placed at focus
def secondaryLL(r0,z0,zmax,zmin,dphi,coeff,axial,az):
    global x,y,z,l,m,n,ux,uy,uz
    tran.woltersecll(x,y,z,l,m,n,ux,uy,uz,r0,z0,zmax,zmin,dphi,coeff,axial,az)
    vignette()
	return

##Wrapper for L-L primary surface
##Placed at focus
def primaryLL(r0,z0,zmax,zmin,dphi,coeff,axial,az):
    global x,y,z,l,m,n,ux,uy,uz
    tran.wolterprimll(x,y,z,l,m,n,ux,uy,uz,r0,z0,zmax,zmin,dphi,coeff,axial,az)
    vignette()
	return

#Wrapper for Wolter primary surface -
#place at surface tangent point
#+z is surface normal
#+y is toward sky
#+x is azimuthal direction
def primaryLLtan(r0,z0,zmax,zmin,dphi,coeff,axial,az):
    global x,y,z,l,m,n,ux,uy,uz
    #Compute Wolter parameters
    alpha,p,d,e = conicsolve.woltparam(r0,z0)
    transform(0,0,0,-np.pi/2-alpha,0,0)
    #Go to Wolter focus minus gap and half mirror length
    transform(0,conicsolve.primrad(z0+75.,r0,z0),-z0-75.,0,0,0)
    #Place Wolter surface
    transform(0,0,0,0,0,-np.pi/2)
    primaryLL(r0,z0,zmax,zmin,dphi,coeff,axial,az)
    transform(0,0,0,0,0,np.pi/2)
    #Go back to original coordinate system
    transform(0,-conicsolve.primrad(z0+75.,r0,z0),z0+75.,0,0,0)
    transform(0,0,0,np.pi/2+alpha,0,0)
	return

#Wrapper for radial grating
def radgrat(hubdist,dpermm,order,wave):
    """Infinite radial grating. Assumes grating in x,y plane
    with grooves converging at hubdist in positive y direction
    dpermm is nm/mm
    wave is in nm
    """
    tran.radgrat(x,y,l,m,n,hubdist,dpermm,order,wave)
	return

def grat(d,order,wave):
	"""Linear grating with groove direction in +y
	Evanescence results in position vector set to zero
	"""
	tran.grat(x,y,l,m,n,d,order,wave)
	return

#Remove vignetted rays from memory
#ind is array of "good" indices, all others are removed
def vignette(ind=None):
    global x,y,z,l,m,n,ux,uy,uz
    if ind==None:
        mag = l**2+m**2+n**2
        ind = where(mag>.1) #Automatic vignetting
                            #requires position vector set to 0.

##    print 'Vignetted: ' + str(size(ind)/float(size(x)))
    x = x[ind]
    y = y[ind]
    z = z[ind]
    l = l[ind]
    m = m[ind]
    n = n[ind]
    ux = ux[ind]
    uy = uy[ind]
    uz = uz[ind]
    

#Trace lens, first surface center is coincident with xy plane
#thickness extends in positive z direction
#Rays should be traced to this plane before calling lens
#to ensure rays hit correct spherical intersection
def lens(r1,r2,thick,d,nl,reverse=False):
    global x,y,z,l,m,n,ux,uy,uz
    if reverse is True:
        r1,r2 = -r2,-r1
    #Trace to first surface
    if r1 != 0:
        transform(0.,0.,r1,0.,0.,0.) #Go to first
                                     #center of curvature, r1>0->convex
        sphere(abs(r1)) #Trace to first spherical surface
    rho = sqrt(x**2 + y**2)/(d/2)
    ind = where(rho<=1.) #Remove rays with radius beyond that of lens
    vignette(ind=ind)
    refract(1.,nl) #Refract into lens

    
    transform(0.,0.,-r1+thick,0.,0.,0.) #Go to center of second surface
    flat()
    if r2 != 0:
        transform(0.,0.,r2,0,0,0) #Go to center of curvature
        sphere(abs(r2)) #Trace to second spherical surface
    rho = sqrt(x**2 + y**2)/(d/2)
    ind = where(rho<=1.) #Remove rays with radius beyond that of lens
    vignette(ind=ind)
    refract(nl,1.) #Refract out of lens
    transform(0.,0.,-r2,0,0,0) #Transform to xy plane tangent to
                              #center of second surface

    #Rays are left at second surface, pointing out of lens in correct direction

#Cylindrical lens, same principle as with standard lens
def cyllens(r1,r2,thick,width,height,nl,reverse=False):
    global x,y,z,l,m,n,ux,uy,uz
    if reverse is True:
        r1,r2 = -r2,-r1
    #Trace to first surface
    if r1 != 0:
        transform(0.,0,r1,0.,0.,0.) #Go to first
                                     #center of curvature, r1>0->convex
        cyl(abs(r1)) #Trace to first spherical surface
    ind = logical_and(x<width/2,y<height/2) #Remove rays outside of cylinder
    vignette(ind=ind)
    refract(1.,nl) #Refract into lens

    
    transform(0.,0,-r1+thick,0.,0.,0.) #Go to center of second surface
    flat()
    if r2 != 0:
        transform(0.,0,r2,0,0,0) #Go to center of curvature
        cyl(abs(r2)) #Trace to second spherical surface
    ind = logical_and(x<width/2,y<height/2) #Remove rays outside of cylinder
    vignette(ind=ind)
    refract(nl,1.) #Refract out of lens
    transform(0.,0,-r2,0,0,0) #Transform to xy plane tangent to
                              #center of second surface

    #Rays are left at second surface, pointing out of lens in correct direction



###### SOURCES #######

#Define point source with angular divergence
#Points in +z direction
def pointsource(ang,num):
    global x,y,z,l,m,n,ux,uy,uz
    #Radial direction cosine magnitude
    rho = sqrt(random.rand(num))*sin(ang)
    theta = random.rand(num)*2*np.pi
    l = rho*cos(theta)
    m = rho*sin(theta)
    n = sqrt(1.-l**2-m**2)
    x = repeat(0.,num)
    y = repeat(0.,num)
    z = repeat(0.,num)
    ux = repeat(0.,num)
    uy = repeat(0.,num)
    uz = repeat(0.,num)

#Define uniform, circular beam of radius rad, pointing in +z direction
def circularbeam(rad,num):
    global x,y,z,l,m,n,ux,uy,uz
    rho = sqrt(random.rand(num))*rad
    theta = random.rand(num)*2*np.pi
    x = rho*cos(theta)
    y = rho*sin(theta)
    z = repeat(0.,num)
    l = repeat(0.,num)
    m = repeat(0.,num)
    n = repeat(1.,num)
    ux = copy(l)
    uy = copy(l)
    uz = copy(l)

#Define annulus of rays pointing in +z direction
def annulus(rin,rout,num):
    global x,y,z,l,m,n,ux,uy,uz
    rho = sqrt(rin**2+random.rand(num)*(rout**2-rin**2))
    theta = random.rand(num)*2*np.pi
    x = rho*cos(theta)
    y = rho*sin(theta)
    z = repeat(0.,num)
    l = repeat(0.,num)
    m = repeat(0.,num)
    n = repeat(1.,num)
    ux = copy(l)
    uy = copy(l)
    uz = copy(l)

#Define subapertured annulus
def subannulus(rin,rout,dphi,num):
    global x,y,z,l,m,n,ux,uy,uz
    rho = sqrt(rin**2+random.rand(num)*(rout**2-rin**2))
    theta = random.rand(num)*dphi - dphi/2.
    x = rho*cos(theta)
    y = rho*sin(theta)
    z = repeat(0.,num)
    l = repeat(0.,num)
    m = repeat(0.,num)
    n = repeat(1.,num)
    ux = copy(l)
    uy = copy(l)
    uz = copy(l)

#Converging beam
#Place at nominal focus
#Input z position, inner and outer radius,
#min and max theta
def convergingbeam(zset,rin,rout,tmin,tmax,num,lscat):
    global x,y,z,l,m,n,ux,uy,uz
    rho = sqrt(rin**2+random.rand(num)*(rout**2-rin**2))
    theta = tmin + random.rand(num)*(tmax-tmin)
    x = rho*cos(theta)
    y = rho*sin(theta)
    z = repeat(zset,num)
    lscat = lscat * tan((random.rand(num) - .5)*np.pi)
    lscat = lscat/60**2 * np.pi/180.
    n = -cos(arctan(rho/zset)+lscat)
    l = -sqrt(1-n**2)*cos(theta)
    m = -sqrt(1-n**2)*sin(theta)
    ux = repeat(0.,num)
    uy = repeat(0.,num)
    uz = repeat(0.,num)

#Converging beam
#Place at nominal focus
#Input z position, inner and outer radius,
#min and max theta
def convergingbeam2(zset,xmin,xmax,ymin,ymax,num,lscat):
    global x,y,z,l,m,n,ux,uy,uz
    x = xmin + random.rand(num)*(xmax-xmin)
    y = ymin + random.rand(num)*(ymax-ymin)
    rho = sqrt(x**2+y**2)
    theta = arctan2(y,x)
    z = repeat(zset,num)
    lscat = lscat * tan((random.rand(num) - .5)*np.pi)
    lscat = lscat/60**2 * np.pi/180.
    n = -cos(arctan(rho/zset)+lscat)
    l = -sqrt(1-n**2)*cos(theta)
    m = -sqrt(1-n**2)*sin(theta)
    ux = repeat(0.,num)
    uy = repeat(0.,num)
    uz = repeat(0.,num)

#Rectangular beam pointing in +z direction
def rectbeam(xhalfwidth,yhalfwidth,num):
    global x,y,z,l,m,n,ux,uy,uz
    x = (random.rand(num)-.5)*2*xhalfwidth
    y = (random.rand(num)-.5)*2*yhalfwidth
    z = repeat(0.,num)
    n = repeat(1.,num)
    l = copy(z)
    m = copy(z)
    ux = repeat(0.,num)
    uy = repeat(0.,num)
    uz = repeat(0.,num)
    
####### Lenses ##########
def LJ1653L2(reverse=False):
    cyllens(103.36,0,4.09,30.,60.,1.51501,reverse=reverse)
    return

def LJ1629L2(reverse=False):
    cyllens(77.52,0,4.46,30.,60.,1.51501,reverse=reverse)
    return

def AC254_400_A(reverse=False):
    if reverse is False:
        lens(738.5,181.55,2.,12.7*2,1.64363)
        lens(181.55,-219.8,4.,12.7*2,1.51501)
    else:
        lens(181.55,-219.8,4.,12.7*2,1.51501,reverse=True)
        lens(738.5,181.55,2.,12.7*2,1.64363,reverse=True)
    return

def AC508_200_A(reverse=False):
    if reverse is False:
        lens(109.86,-93.110,8.5,50.8,1.51501)
        lens(-93.110,-376.25,2.,50.8,1.64363)
    else:
        lens(-93.110,-376.25,2.,50.8,1.64363,reverse=True)
        lens(109.86,-93.110,8.5,50.8,1.51501,reverse=True)
    return

def cylNull(reverse=False):
    if reverse is False:
        transform(0,0,0,np.pi/2,0,0)
        cylconic(.007626,-.575)
        refract(1.,1.51501)
        transform(0,0,0,-np.pi/2,0,0)
        transform(0,0,50,0,0,0)
        flat()
        refract(1.51501,1.)
    else:
        refract(1.,1.51501)
        transform(0,0,50,0,0,0)
        transform(0,0,0,np.pi/2,0,0)
        cylconic(-.007626,-.575)
        refract(1.51501,1.)
        transform(0,0,0,-np.pi/2,0,0)


#######  ANALYSES #########
def findimageplane(zscan,num):
    global x,y,z,l,m,n,ux,uy,uz
    rms = []
    zsteps = linspace(-zscan,zscan,num)
    for znow in linspace(-zscan,zscan,num):
        #Transform to offset
        transform(0,0,znow,0,0,0)
        #Trace rays to new plane
        flat()
        #Determine centroid
        cx = nanmean(x)
        cy = nanmean(y)
        #Compute RMS image size
        rho2 = (x-cx)**2+(y-cy)**2
        rms.append(sqrt(mean(rho2)))
        #Return to nominal plane
        transform(0,0,-znow,0,0,0)
    flat()

    clf()
    plot(zsteps,rms)

    return zsteps[where(rms==min(rms))]

def findlineplane(zscan,num):
    global x,y,z,l,m,n,ux,uy,uz
    rms = []
    zsteps = linspace(-zscan,zscan,num)
    for znow in linspace(-zscan,zscan,num):
        #Transform to offset
        transform(0,0,znow,0,0,0)
        #Trace rays to new plane
        flat()
        #Determine centroid
        cx = nanmean(x)
        #Compute RMS image size
        rho2 = (x-cx)**2
        rms.append(sqrt(mean(rho2)))
        #Return to nominal plane
        transform(0,0,-znow,0,0,0)
    flat()

    clf()
    plot(zsteps,rms)

    return zsteps[where(rms==min(rms))]

def findimageplane2(zscan,num):
    global x,y,z,l,m,n,ux,uy,uz
    hew = []
    zsteps = linspace(-zscan,zscan,num)
    for znow in linspace(-zscan,zscan,num):
        #Transform to offset
        transform(0,0,znow,0,0,0)
        #Trace rays to new plane
        flat()
        #Determine centroid
        cx = nanmean(x)
        cy = nanmean(y)
        #Compute RMS image size
        rho2 = sqrt((x-cx)**2+(y-cy)**2)
        hew.append(median(rho2)*2.)
        #Return to nominal plane
        transform(0,0,-znow,0,0,0)
    flat()

    clf()
    plot(zsteps,hew)

    return zsteps[where(hew==min(hew))]

#Wrapper to create array of zernike values
def zerntest(n,m):
    #Plot radialpoly vs. fastradpoly for rho=0 to 1
    rho = linspace(0.,1.,10)
    vec1 = copy(rho)
    vec2 = copy(rho)
    for i in range(size(vec1)):
        vec1[i] = tran.radialpoly(rho[i],n,m)
        vec2[i] = tran.fastradpoly(rho[i],n,m)
    plot(vec1,vec2,'.')

#Wrapper for reconstructing referenced wavefront
def referencedWavefront(xang,yang,phase,xang2,yang2,phase2):
    phaseinf = copy(phase)
    phaseinf[:,:] = 0.
    ind = where(logical_or(phase==100,phase2==100))
    phaseinf[ind] = 100
    xanginf = copy(xang)
    xanginf = xang2-xang
    yanginf = copy(yang)
    yanginf = yang2-yang
    xanginf[ind] = 100
    yanginf[ind] = 100

    #Reconstruct influence wavefront
    influence = reconstruct.reconstruct(xanginf,yanginf,1.e-12,phaseinf)

    #Make invalid np.pixels NaNs
    ind = where(influence==100.)
    influence[ind] = NaN

    return influence
