import numpy as np
from matplotlib import pyplot as plt
import scipy

#2014/04/07 first implementation with classes

def VFT(p,T):
    '''From a 3 vector of VFT parameters (p) calculate viscosity for
    a vector of temperatures (T), return logarithm of viscosity.         
    Vogel-Fulcher-Tamman equation, nu(T)=nu0*exp((T0)/(T-Tinf))'''
    return p[0]+np.log10(np.e)*(p[1])/(T-p[2])   

        
class Material(object):

    name=""
    def __init__(self,**kwargs):
        #quick prototype, replace with actual arguments.
        for k, v in kwargs.items():
            setattr(self, k, v)

    def _fitVFT(self):
        '''Fit two vectors of temperature and log(viscosity) using
        the Vogel-Fulcher-Tamman equation. Initial guess is calculated from the
        first three parameters. Return success value, set self.VFTpars.'''

        # define a fitting function where
        # p[0] = log(nu0) =l0
        # p[1] = T0
        # p[2] = Tinf
        T=self.Tnu[0]
        logNu=self.Tnu[1]
        
        #default fitfunc(p,T) with p VFT parameters and T temperature
        errfunc = lambda p, x, y: VFT(p,x)-y    #errfunc(p,x,y) is the difference between y and the VFT function for p
        
        # guess some fit parameters
        a1,b1=[(T[0]*logNu[0]-T[1]*logNu[1])/(logNu[0]-logNu[1]),(T[0]-T[1])/(logNu[0]-logNu[1])]
        a2,b2=[(T[2]*logNu[2]-T[1]*logNu[1])/(logNu[2]-logNu[1]),(T[2]-T[1])/(logNu[2]-logNu[1])]
        l0=(a2-a1)/(b1-b2)
        Tinf=a1+b1*l0
        T0=(T[1]-Tinf)*np.log(10**logNu[1]/l0)
        p0=[l0,T0,Tinf]
        #p0 = [3e-3,10000.,256.]
        #p0 = [3e-3,9000.,100.] #it works for D263
        p1, success = scipy.optimize.leastsq(errfunc, p0,args=(T,logNu)) 
        self.VFTpars=p1
        return success

    @property    
    def viscosity(self,T=293.75):
        """ return the viscosity (not logarithmic) of the material for a given vector of temperatures."""
        self._fitVFT()
        return 10**VFT(self.VFTpars,T)

    def plot_viscosity(self,T,overplot=False,noMarkers=False):
        if not overplot:
            plt.clf()
            plt.title('')
            plt.xlabel('Temperature ($^{\circ}$C)')
            plt.ylabel(r'$\log{(\eta)}$')
        
        self._fitVFT()
        if not noMarkers: plt.plot(self.Tnu[0],self.Tnu[1],'o',label=self.name+' Data')
        plt.plot(T,self.np.log(self.viscosity(T)),label='VFT fit')
        if not overplot: plt.grid()
        plt.legend()
        plt.show()
        return plt.gca()
    
if __name__=='__main__':
    TEagle=np.array([669,722,971,1293]) #Eagle
    TD263=np.array([529,557,736,1051]) #d263
    logNu=np.array([14.5,13,7.6,4])
    
    eagle=Material(Tnu=(TEagle,logNu),name='EagleXG')
    D263=Material(Tnu=(TD263,logNu),name='D263')
    
    xT=np.linspace(min((min(TD263),min(TEagle))),max((max(TD263),max(TEagle))),100)
    eagle.plot_viscosity(xT)
    D263.plot_viscosity(xT,overplot=True)
    
    plt.axhline(10,label=r'$\log{(\eta)}=10.0$',ls='--')
    plt.axvline(570,label=r'$D263 slumping Temp$',ls=':')
    plt.legend()
    plt.savefig('VFT.jpg')


